import json
import os
from tkinter import *
from tkinter import messagebox, ttk

def ver_relatorios():
    """Exibe o conteúdo do arquivo JSON de relatórios em uma nova janela."""
    root9 = Tk()
    root9.title("Ver Relatórios")
    root9.geometry("800x600")

    try:
        with open('relatorios.json', 'r') as f:
            relatorios_dados = json.load(f)
    except FileNotFoundError:
        messagebox.showinfo("Aviso", "Nenhum relatório encontrado.")
        root9.destroy()
        return
    except json.JSONDecodeError:
        messagebox.showerror("Erro", "Erro ao ler o arquivo JSON de relatórios.")
        root9.destroy()
        return
    except Exception as e:
        messagebox.showerror("Erro", f"Erro inesperado: {e}")
        root9.destroy()
        return

    if not isinstance(relatorios_dados, list):
        messagebox.showerror("Erro", "Formato inesperado no arquivo JSON. Espera-se uma lista de dicionários.")
        root9.destroy()
        return

    if not relatorios_dados:
        messagebox.showinfo("Aviso", "Nenhum relatório encontrado.")
        root9.destroy()
        return

    columns = ("Produto", "Quantidade", "Estado da Compra", "Observação", "Método de Pagamento")
    tree = ttk.Treeview(root9, columns=columns, show='headings')
    for col in columns:
        tree.heading(col, text=col)

    tree.pack(fill=BOTH, expand=True)

    for dado in relatorios_dados:
        if isinstance(dado, dict):
            metodo_pagamento = ', '.join([k for k, v in dado.get("Metodo de Pagamento", {}).items() if v])
            estado_compra = dado.get("Estado da Compra", "")

            tree.insert("", "end", values=(
                dado.get("Produto", ""),
                dado.get("Quantidade", ""),
                dado.get("Estado da Compra", ""),
                dado.get("Observacao", ""),
                metodo_pagamento
            ), tags=())
        else:
            messagebox.showerror("Erro", "Formato inesperado no arquivo JSON. Cada item deve ser um dicionário.")
            root9.destroy()
            return

    def destroy():
        root9.destroy()

    btn_voltar = Button(root9, text="Voltar", width=15, command=destroy)
    btn_voltar.pack(pady=10)

def criarRelatorio():
    def salvar_em_json(dados):
        """Salva os dados em um arquivo JSON."""
        try:
            if os.path.exists('relatorios.json'):
                with open('relatorios.json', 'r') as f:
                    relatorios_dados = json.load(f)
            else:
                relatorios_dados = []

            relatorios_dados.append(dados)

            with open('relatorios.json', 'w') as f:
                json.dump(relatorios_dados, f, indent=4)
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar dados: {e}")

    def confirmar():
        """Coleta os dados e salva em um arquivo JSON."""
        produto = entry_produto.get()
        quantidade = entry_quantidade.get()
        estado_compra = estado_var.get() 
        observacao = entry_observacao.get()
        pagamento = {
            "Dinheiro": check_dinheiro_var.get(),
            "Cartao de Credito": check_credito_var.get(),
            "Cartao de Debito": check_debito_var.get()
        }

        estado_map = {
            1: "Pendente",
            2: "Em Andamento",
            3: "Finalizada"
        }
        estado_compra_str = estado_map.get(estado_compra, "Pendente")

        if produto and quantidade and estado_compra_str:
            dados = {
                "Produto": produto,
                "Quantidade": quantidade,
                "Estado da Compra": estado_compra_str,
                "Observacao": observacao,
                "Metodo de Pagamento": pagamento
            }
            salvar_em_json(dados)
            messagebox.showinfo("Confirmação", "Relatório salvo com sucesso!")
            root7.destroy()
        else:
            messagebox.showerror("Erro", "Todos os campos obrigatórios devem ser preenchidos.")

    root7 = Tk()
    root7.title("Relatórios")
    root7.geometry("700x700")

    Label(root7, text="Produto: ", width=10).place(x=300, y=10)
    entry_produto = Entry(root7, width=30)
    entry_produto.place(x=250, y=40)

    Label(root7, text="Quantidade: ", width=10).place(x=300, y=70)
    entry_quantidade = Entry(root7, width=30)
    entry_quantidade.place(x=250, y=100)

    Label(root7, text="Estado da Compra: ", width=20).place(x=250, y=130)
    estado_var = IntVar()
    estado_var.set(0)

    radio_pendente = Radiobutton(root7, text="Pendente", value=0, width=15, variable=estado_var)
    radio_pendente.place(x=250, y=160)
    radio_emAndamento = Radiobutton(root7, text="Em Andamento", value=1, width=15, variable=estado_var)
    radio_emAndamento.place(x=250, y=190)
    radio_Finalizada = Radiobutton(root7, text="Finalizada", value=2, width=15, variable=estado_var)
    radio_Finalizada.place(x=250, y=220)

    Label(root7, text="Observação: ", width=10).place(x=290, y=280)
    entry_observacao = Entry(root7, width=30)
    entry_observacao.place(x=250, y=310)

    Label(root7, text="Método de Pagamento: ", width=20).place(x=250, y=370)

    check_dinheiro_var = BooleanVar()
    check_dinheiro = Checkbutton(root7, text="Dinheiro", width=15, variable=check_dinheiro_var)
    check_dinheiro.place(x=250, y=400)

    check_credito_var = BooleanVar()
    check_credito = Checkbutton(root7, text="Cartão de Crédito", width=15, variable=check_credito_var)
    check_credito.place(x=250, y=430)

    check_debito_var = BooleanVar()
    check_debito = Checkbutton(root7, text="Cartão de Débito", width=15, variable=check_debito_var)
    check_debito.place(x=250, y=460)

    btn_voltar = Button(root7, text="Voltar", width=15, command=root7.destroy)
    btn_voltar.place(x=190, y=520)

    btn_confirmar = Button(root7, text="Confirmar", width=15, command=confirmar)
    btn_confirmar.place(x=370, y=520)

def relatorios():
    global root8
    root8 = Tk()
    root8.title("Relatórios")
    root8.geometry("300x200")

    btn_ver = Button(root8, text="Ver Relatórios", width=20, command=ver_relatorios)
    btn_ver.place(x=80,y=20)

    btn_relatorio = Button(root8, text="Criar Relatórios", width=20, command=criarRelatorio)
    btn_relatorio.place(x=80,y=60)

def lupa1():
    global root3, entry_nome, entry_cpf, entry_tipo, entry_endereco

    fornecedor_nome = entry_mudar.get()
    fornecedor_atualizado = None

    for f in fornecedor:
        if f['Nome'] == fornecedor_nome:
            fornecedor_atualizado = f
            break

    if fornecedor_atualizado:
        for widget in root3.winfo_children():
            widget.destroy()
        Label(root3, text=f"Informações Atuais do Fornecedor {fornecedor_nome}").place(x=90, y=10)
        Label(root3, text=f"Nome: {fornecedor_atualizado['Nome']}").place(x=90, y=40)
        Label(root3, text=f"CPF/CNPJ: {fornecedor_atualizado['CPF/CNPJ']}").place(x=90, y=70)
        Label(root3, text=f"Tipo de Produto: {fornecedor_atualizado['Quantidade']}").place(x=90, y=100)
        Label(root3, text=f"Endereço: {fornecedor_atualizado['Endereço']}").place(x=90, y=130)
    
        Label(root3, text="Novo Nome:").place(x=90, y=170)
        entry_nome = Entry(root3, width=30)
        entry_nome.place(x=220, y=170)
        entry_nome.insert(0, fornecedor_atualizado['Nome'])

        Label(root3, text="Novo CPF/CNPJ:").place(x=90, y=200)
        entry_cpf = Entry(root3, width=30)
        entry_cpf.place(x=220, y=200)
        entry_cpf.insert(0, fornecedor_atualizado['CPF/CNPJ'])

        Label(root3, text="Novo Tipo de Produto:").place(x=90, y=230)
        entry_tipo = Entry(root3, width=30)
        entry_tipo.place(x=220, y=230)
        entry_tipo.insert(0, fornecedor_atualizado['Quantidade'])

        Label(root3, text="Novo Endereço:").place(x=90, y=260)
        entry_endereco = Entry(root3, width=30)
        entry_endereco.place(x=220, y=260)
        entry_endereco.insert(0, fornecedor_atualizado['Endereço'])

        def atualizar_informacoes():
            novo_nome = entry_nome.get()
            novo_cpf = entry_cpf.get()
            novo_tipo = entry_tipo.get()
            novo_endereco = entry_endereco.get()

            fornecedor_atualizado['Nome'] = novo_nome
            fornecedor_atualizado['CPF/CNPJ'] = novo_cpf
            fornecedor_atualizado['Quantidade'] = novo_tipo
            fornecedor_atualizado['Endereço'] = novo_endereco

            salvar_fornecedores()
            messagebox.showinfo('Atualizar', 'Informações do fornecedor atualizadas com sucesso.')
            root3.destroy()

        btn_confirmar = Button(root3, text="Confirmar", width=15, command=atualizar_informacoes)
        btn_confirmar.place(x=180, y=300)

    else:
        messagebox.showerror('Pesquisar', 'Fornecedor não encontrado.')

def delete_fornecedor():
    def confirmar_exclusao():
        """Confirma a exclusão do fornecedor e atualiza o arquivo JSON."""
        fornecedor_nome = entry_excluir.get()
        fornecedor_encontrado = None
        for f in fornecedor:
            if f['Nome'] == fornecedor_nome:
                fornecedor_encontrado = f
                break
        
        if fornecedor_encontrado:
            resposta = messagebox.askyesno('Confirmar Exclusão', f"Tem certeza que deseja excluir o fornecedor {fornecedor_nome}?")
            if resposta:
                fornecedor.remove(fornecedor_encontrado)
                salvar_fornecedores()
                messagebox.showinfo('Sucesso', 'Fornecedor excluído com sucesso.')
                root4.destroy()
        else:
            messagebox.showerror('Erro', 'Fornecedor não encontrado.')

    def buscar_fornecedor():
        """Busca o fornecedor e exibe as informações."""
        fornecedor_nome = entry_excluir.get()
        fornecedor_encontrado = None
        for f in fornecedor:
            if f['Nome'] == fornecedor_nome:
                fornecedor_encontrado = f
                break
        
        for widget in frame_info.winfo_children():
            widget.destroy()

        if fornecedor_encontrado:
            Label(frame_info, text=f"Nome: {fornecedor_encontrado['Nome']}").pack(anchor='w')
            Label(frame_info, text=f"CPF/CNPJ: {fornecedor_encontrado['CPF/CNPJ']}").pack(anchor='w')
            Label(frame_info, text=f"Tipo de Produto: {fornecedor_encontrado['Quantidade']}").pack(anchor='w')
            Label(frame_info, text=f"Endereço: {fornecedor_encontrado['Endereço']}").pack(anchor='w')
            Button(frame_info, text="Confirmar Exclusão", command=confirmar_exclusao).pack(pady=10)
        else:
            messagebox.showerror('Erro', 'Fornecedor não encontrado.')

    global root4, entry_excluir, frame_info, fornecedor
    root4 = Tk()
    root4.title("Excluir Fornecedor")
    root4.geometry("700x700")

    label_excluir = Label(root4, text="Escreva o Nome do Fornecedor que Você Gostaria de Excluir", width=80)
    label_excluir.pack(pady=10)

    entry_excluir = Entry(root4, width=30)
    entry_excluir.pack(pady=10)

    btn_procurar = Button(root4, text="Procurar", width=10, command=buscar_fornecedor)
    btn_procurar.pack(pady=10)

    frame_info = Frame(root4)
    frame_info.pack(pady=20)

    btn_voltar = Button(root4, text="Voltar", width=15, command=root4.destroy)
    btn_voltar.pack(pady=20)

    fornecedor = carregar_fornecedores()

def carregar_reposicao(arquivo):
    """Carregar os dados do arquivo JSON de reposição."""
    reposicao_dados = []
    try:
        with open(arquivo, 'r') as f:
            reposicao_dados = json.load(f)
    except FileNotFoundError:
        messagebox.showinfo("Aviso", f"Arquivo {arquivo} não encontrado. Nenhum dado será exibido.")
    except json.JSONDecodeError:
        messagebox.showerror("Erro", f"Erro ao decodificar o arquivo JSON {arquivo}. Verifique o formato do arquivo.")
    return reposicao_dados

def ver_estoque():
    root4 = Tk()
    root4.title("Ver Estoque")
    root4.geometry("700x700")

    reposicao_dados = carregar_reposicao('reposicao.json')

    if reposicao_dados:
            tree = ttk.Treeview(root4, columns=("Nome", "Código", "Quantidade"), show='headings')
            tree.heading("Nome", text="Nome")
            tree.heading("Código", text="Código")
            tree.heading("Quantidade", text="Quantidade")
            tree.pack(fill=BOTH, expand=True)

            # Definindo tags para cores
            tree.tag_configure('baixo', foreground='red')
            tree.tag_configure('medio', foreground='orange')
            tree.tag_configure('alto', foreground='green')

            for dado in reposicao_dados:
                quantidade = int(dado.get("Quantidade", 0))
                tag = 'baixo' if quantidade < 10 else 'medio' if quantidade <= 30 else 'alto'
                tree.insert("", END, values=(dado.get("Nome", ""), dado.get("Código", ""), dado.get("Quantidade", "")), tags=(tag,))
    def destroy():
        root4.destroy()

    btn_voltar = Button(root4, text="Voltar", width=15, command=destroy)
    btn_voltar.pack(pady=10)

def lupa():
    global  root3
    fornecedor_nome = entry_excluir.get()
    for f in fornecedor:
        if f['Nome'] == fornecedor_nome:
            label_atualizar = Label(root4, text=f)
            label_atualizar.place(x=100, y=60)
            break
    else:
        messagebox.showerror('Pesquisar', 'Fornecedor não encontrado.')

def atualizar():
    global entry_mudar, root3
    root3 = Tk()
    root3.title("Atualizar Informações")
    root3.geometry("700x700")

    label_mudar = Label(root3, text="Nome do Fornecedor Que Você Gostaria de Mudar as Informações: ", width=80)
    label_mudar.place(x=90,y=10)
    entry_mudar = Entry(root3, width=30)
    entry_mudar.place(x=270,y=40)

    btn_pesquisar = Button(root3, text="Pesquisar", width=10, command=lupa1)
    btn_pesquisar.place(x=530,y=30)

def add_fornecedor():
    global root1
    root2 = Tk()
    root2.title("Cadastro")
    root2.geometry("700x700")

    label_nome = Label(root2, text="Nome do fornecedor: ", width=25)
    label_nome.place(x=280, y=10)
    entry_nome = Entry(root2, width=30)
    entry_nome.place(x=280, y=40)

    label_cpf = Label(root2, text="CPF/CNPJ: ", width=25)
    label_cpf.place(x=280, y=70)
    entry_cpf = Entry(root2, width=30)
    entry_cpf.place(x=280, y=100)

    label_quantidade = Label(root2, text="Tipo de Produto: ", width=25)
    label_quantidade.place(x=280, y=130)
    entry_quantidade = Entry(root2, width=30)
    entry_quantidade.place(x=280, y=160)

    label_endereço = Label(root2, text="Endereço do Fornecedor: ", width=25)
    label_endereço.place(x=280, y=190)
    entry_endereço = Entry(root2, width=30)
    entry_endereço.place(x=280, y=220)

    def confirm0():
        if entry_nome.get() and entry_cpf.get() and entry_quantidade.get() and entry_endereço.get():
            messagebox.showinfo('Cadastro', 'Fornecedor Adicionado com Sucesso')
            add = {
                "Nome": entry_nome.get(),
                "CPF/CNPJ": entry_cpf.get(),
                "Quantidade": entry_quantidade.get(),
                "Endereço": entry_endereço.get()
            }
            fornecedor.append(add)
            salvar_fornecedores()  
            root2.destroy()
            root1.destroy()
        else:
            messagebox.showerror('Cadastro', 'Alguma Área do Cadastro não Preenchida')

    def destroy0():
        root2.destroy()

    btn_voltar = Button(root2, text="Voltar", width=15, command=destroy0)
    btn_voltar.place(x=230, y=260)

    btn_confirmar = Button(root2, text="Confirmar", width=15, command=confirm0)
    btn_confirmar.place(x=380, y=260)

def fornecedores():
    global root1
    root1 = Tk()
    root1.title("Fornecedores")
    root1.geometry("700x700")

    global fornecedor
    fornecedor = carregar_fornecedores()

    label_opcoes = Label(root1, text="Escolha as Opções Abaixo: ", font=("Arial", 14), width=25)
    label_opcoes.place(x=225, y=10)

    def destroy1():
        root1.destroy()

    btn_ver = Button(root1, text="Ver Fornecedores", width=30, command=ver_fornecedores)
    btn_ver.place(x=250, y=60)
    btn_add = Button(root1, text="Adicionar Fornecedor", width=30, command=add_fornecedor)
    btn_add.place(x=250, y=110)
    btn_atualizar = Button(root1, text="Atualizar Informações", width=30, command=atualizar)
    btn_atualizar.place(x=250, y=160)
    btn_excluir = Button(root1, text="Excluir Fornecedor", width=30, command=delete_fornecedor)
    btn_excluir.place(x=250, y=210)
    btn_voltar0 = Button(root1, text="Voltar", width=10, command=destroy1)
    btn_voltar0.place(x=322, y=290)

def ver_fornecedores():
    root6 = Tk()
    root6.title("Ver Fornecedores")
    root6.geometry("800x800")

    tree = ttk.Treeview(root6, columns=("Nome", "CPF/CNPJ", "Quantidade", "Endereço"), show='headings')
    tree.heading("Nome", text="Nome")
    tree.heading("CPF/CNPJ", text="CPF/CNPJ")
    tree.heading("Quantidade", text="Tipo de Produto")
    tree.heading("Endereço", text="Endereço")
    tree.pack(fill=BOTH, expand=True)

    for dado in fornecedor:
        tree.insert("", END, values=(dado.get("Nome", ""), dado.get("CPF/CNPJ", ""), dado.get("Quantidade", ""), dado.get("Endereço", "")))

    def destroy():
        root6.destroy()

    btn_voltar = Button(root6, text="Voltar", width=15, command=destroy)
    btn_voltar.pack(pady=10)

def repor():
    def save_to_json(item, codigo, quantidade):
        try:
            try:
                with open('reposicao.json', 'r') as f:
                    reposicao_dados = json.load(f)
            except FileNotFoundError:
                reposicao_dados = []
            except json.JSONDecodeError:
                reposicao_dados = []

            data = {
                "Nome": item,
                "Código": codigo,
                "Quantidade": quantidade
            }
            reposicao_dados.append(data)

            with open('reposicao.json', 'w') as f:
                json.dump(reposicao_dados, f, indent=4)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar dados de reposição: {e}")

    global root0
    root0 = Tk()
    root0.title("Reposição")
    root0.geometry("700x700")

    label_item = Label(root0, text="Nome do produto Desejado: ", width=25)
    label_item.place(x=280, y=10)
    entry_item = Entry(root0, width=30)
    entry_item.place(x=280, y=40)

    label_codigo = Label(root0, text="Código do produto: ", width=25)
    label_codigo.place(x=280, y=70)
    entry_codigo = Entry(root0, width=30)
    entry_codigo.place(x=280, y=100)

    label_quantidade = Label(root0, text="Quantidade Desejada:", width=25)
    label_quantidade.place(x=280, y=130)
    entry_quantidade = Entry(root0, width=30)
    entry_quantidade.place(x=280, y=160)

    def confirm():
        item = entry_item.get()
        codigo = entry_codigo.get()
        quantidade = entry_quantidade.get()

        if item and codigo and quantidade:
            save_to_json(item, codigo, quantidade)
            messagebox.showinfo('Reposição', 'Reposição Efetuada Com Sucesso')
            root0.destroy()
        else:
            messagebox.showerror('Reposição', 'Alguma Área do Cadastro não Preenchida')

    def destroy():
        root0.destroy()

    btn_voltar = Button(root0, text="Voltar", width=15, command=destroy)
    btn_voltar.place(x=230, y=260)

    btn_confirmar = Button(root0, text="Confirmar", width=15, command=confirm)
    btn_confirmar.place(x=380, y=260)

def selecao():
    selected_option = StringVar(root0)
    selected_option.set(options[0])  

    options = ["Opção 1", "Opção 2", "Opção 3"]

    dropdown = OptionMenu(root0, selected_option, *options)
    dropdown.place(x=330,y=190)

def carregar_fornecedores():
    """Carregar dados de fornecedores do arquivo JSON."""
    try:
        with open('fornecedores.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        messagebox.showerror("Erro", "Erro ao decodificar o arquivo JSON de fornecedores.")
        return []

def salvar_fornecedores():
    """Salvar dados de fornecedores no arquivo JSON."""
    try:
        with open('fornecedores.json', 'w') as f:
            json.dump(fornecedor, f, indent=4)
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao salvar dados de fornecedores: {e}")

def exibir_arquivos_json():
    root5 = Tk()
    root5.title("Arquivos JSON Disponíveis")
    root5.geometry("400x400")

    arquivos_json = [f for f in os.listdir() if f.endswith('.json')]
    if not arquivos_json:
        arquivos_json = ["Nenhum arquivo JSON encontrado"]

    listbox = Listbox(root5)
    listbox.pack(fill=BOTH, expand=True)

    for arquivo in arquivos_json:
        listbox.insert(END, arquivo)

    def selecionar_arquivo(event):
        selecionado = listbox.get(listbox.curselection())
        if selecionado:
            ver_estoque()

    listbox.bind("<Double-1>", selecionar_arquivo)

    def destroy():
        root5.destroy()

    btn_voltar = Button(root5, text="Voltar", width=15, command=destroy)
    btn_voltar.pack(pady=10)

root = Tk()
root.title("Sistema")
root.geometry("400x400")

label_escolhas = Label(root, text="Escolhas as Opções a Baixo: ", font=("Arial", 14), width=25)
label_escolhas.place(x=85, y=10)

btn_estoque = Button(root, text="Ver Estoque", width=20, command=ver_estoque)
btn_estoque.place(x=140, y=50)

btn_reposição = Button(root, text="Repor Estoque", width=20, command=repor)
btn_reposição.place(x=140, y=90)

btn_fornecedor = Button(root, text="Fornecedores", width=20, command=fornecedores)
btn_fornecedor.place(x=140, y=130)

btn_historico = Button(root, text="Histórico de Vendas", width=20, command=None)
btn_historico.place(x=140, y=170)

btn_retirar = Button(root, text="Retirada do Estoque", width=20, command=None)
btn_retirar.place(x=140,y=210)

btn_relatorio = Button(root, text="Relatórios", width=20, command=relatorios)
btn_relatorio.place(x=140,y=250)

root.mainloop()
